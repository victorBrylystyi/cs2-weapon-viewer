

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useControls } from 'leva'
import { useEffect, useState } from 'react'
import { useThree } from '@react-three/fiber'
import { DepthOfField, EffectComposer } from '@react-three/postprocessing'
import { Annotations } from '../Annotations'
import { useSnapshot } from 'valtio'
import { store } from '../../store'

type GLTFResult = GLTF & {
    nodes: {
      desert_eagle: THREE.Mesh
      m4a1_s: THREE.Mesh
      ['usp-s']: THREE.Mesh
    }
    materials: {
      Printstream_Deagle: THREE.MeshStandardMaterial
      ['Printstream_M4A1-S']: THREE.MeshStandardMaterial
      ['Printstream_USP-S']: THREE.MeshStandardMaterial
    }
}

const raycaster = new THREE.Raycaster();
const pointer = new THREE.Vector2();
const _v3 = new THREE.Vector3();


export const Experience = (props: JSX.IntrinsicElements['group']) => {

    const {camera, scene} = useThree();

    const { nodes, materials } = useGLTF('/collection2.glb') as GLTFResult;

    const [target, setTarget] = useState<[number, number, number]>([0,0,0]); 

    const { weapon, roughness, metalness } = useControls({
        weapon: {
            value: 'M4A1-S',
            options: ["M4A1-S", "Desert eagle", "USP-S"],
        },
        // focusDistance: {
        //     min: 0,
        //     max: 1,
        //     value: 0.11,
        //     step:0.01
        // },
        // focalLength: {
        //     min: 0,
        //     max: 1,
        //     value: 0.03,
        //     step:0.01
        // },
        // bokehScale: {
        //     min: 0,
        //     max: 10,
        //     value: 6,
        //     step: 0.1
        // },

        roughness: {
            min: 0,
            max: 1,
            value: 0.74,
            step: 0.01
        },
        metalness: {
            min: 0,
            max: 1,
            value: 0.08,
            step: 0.01
        }


    });

    useEffect(() => {
        const mat = (weapon === 'Desert eagle') ? materials.Printstream_Deagle : (weapon === 'M4A1-S') ? materials['Printstream_M4A1-S'] : materials['Printstream_USP-S']; 

        mat.metalness = metalness;
        mat.roughness = roughness;

    }, [weapon, materials, roughness, metalness]);

    const currentAnnotation = useSnapshot(store).selectedAnnotation;
    const config = useSnapshot(store).config[weapon];

    useEffect(() => {

        const clickEv = (e: MouseEvent) => {

            const x = ( e.clientX / (window.innerWidth) ) * 2 - 1;
            const y = - ( e.clientY / (window.innerHeight) ) * 2 + 1;

            pointer.set(x, y);
        
              raycaster.setFromCamera( pointer, camera );
        
              const intersects = raycaster.intersectObjects( scene.children );

              if (intersects.length > 0) {
                const target = intersects[0].point.toArray();
                setTarget(target);
              } 
        };

        window.addEventListener('click', clickEv)

        return () => {
            window.removeEventListener('click', clickEv)
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    useEffect(() => {

        if (currentAnnotation) {
            const ca = config.find(item => item.title === currentAnnotation)
            if (ca) setTarget([...ca.dofTarget])
        }

    }, [currentAnnotation, config])


  return (
    <>
        <group {...props} dispose={null} scale={[3, 3, 3]}>
        <group name="Scene">
            {weapon == 'Desert eagle' ? 
                <mesh
                    name="desert_eagle"
                    castShadow
                    receiveShadow
                    geometry={nodes.desert_eagle.geometry}
                    material={materials.Printstream_Deagle}
                    // position={[-1.179, 0.058, 0.294]}
                    position={[0,0,0]}
                    rotation={[Math.PI /2, 0, Math.PI /2]}
                    // rotation={[0, 0.178, Math.PI / 2]}
                    // scale={0.1}
                    userData={{ name: 'desert_eagle' }}
                >
                </mesh>
                :  weapon == 'M4A1-S' ?
                <mesh
                    name="m4a1_s"
                    castShadow
                    receiveShadow
                    geometry={nodes.m4a1_s.geometry}
                    material={materials['Printstream_M4A1-S']}
                    // position={[0.208, 0.181, -0.629]}
                    // rotation={[0.195, 0.013, 1.605]}
                    position={[0,0,0]}
                    rotation={[Math.PI /2, 0, Math.PI /2]}
                    // scale={0.1}
                    userData={{ name: 'm4a1_s' }}
                >
                </mesh>
                :
                <mesh
                    name="usp-s"
                    castShadow
                    receiveShadow
                    geometry={nodes['usp-s'].geometry}
                    material={materials['Printstream_USP-S']}
                    position={[0,0,0]}
                    rotation={[Math.PI /2, 0, Math.PI /2]}
                    // scale={0.1}
                    userData={{ name: 'usp-s' }}
                />
            }

        </group>
        </group>
        <EffectComposer>
          <DepthOfField
            focusDistance={0.11}
            focalLength={0.03}
            bokehScale={6}
            width={window.innerWidth}
            height={window.innerHeight}
            target={_v3.fromArray(target).clone()}
          />
        </EffectComposer>
        <Annotations weapon={weapon} />
    </>

  )
}

useGLTF.preload('/collection2.glb')
